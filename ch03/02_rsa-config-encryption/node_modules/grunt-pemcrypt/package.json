{
  "name": "grunt-pemcrypt",
  "description": "Use pemcrypt to automatically encrypt and decrypt JSON configuration files",
  "version": "0.1.0",
  "homepage": "https://github.com/bevacqua/grunt-pemcrypt",
  "author": {
    "name": "Nicolas Bevacqua",
    "email": "nicolasbevacqua@gmail.com",
    "url": "http://blog.ponyfoo.com/"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:bevacqua/grunt-pemcrypt.git"
  },
  "bugs": {
    "url": "https://github.com/bevacqua/grunt-pemcrypt/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/bevacqua/grunt-pemcrypt/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "dependencies": {
    "pemcrypt": "0.1.0",
    "chalk": "~0.2.1"
  },
  "readme": "# grunt-pemcrypt\n\n> Use pemcrypt to automatically encrypt and decrypt JSON configuration files\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-pemcrypt --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-pemcrypt');\n```\n\n## The \"pemcrypt\" task\n\n### Overview\nIn your project's Gruntfile, add the task you want to automate to the data object passed into `grunt.initConfig()`.\n\n```js\nvar path = require('path');\nvar cwd = process.cwd();\nvar pemkey = path.join(cwd, '.private.pem');\n\ngrunt.initConfig({\n  pem_gen: {\n    key: { pem: pemkey }\n  },\n  pem_encrypt: {\n    foo: { pem: pemkey, store: 'foo' }\n  },\n  pem_decrypt: {\n    foo: { pem: pemkey, store: 'foo' }\n  }\n})\n```\n\n#### Task `pem_gen`\n\nGenerates a private `.pem` key at the provided absolute file path. In the example I picked a file path in the project root, but you might want to keep your `.pem`s outside the working directory for your repository altogether. You can optionally pass in a `size` value to determine the strength of the private key generated.\n\n```shell\ngrunt pem_gen:key\n```\n\n#### Task `pem_encrypt`\n\nEncrypts the `store` file sitting on our `cwd`, we can override `cwd` by passing it as an option. For example:\n\n```js\n{\n  \"pem_encrypt\": {\n    \"foo\": {\n      \"pem\": pemkey,\n      \"store\": \"foo\",\n      \"cwd\": __dirname + '/bar'\n    }\n  }\n}\n```\n\nAlternatively to providing a `store`, you can provide different locations for each of your versions, for example:\n\n```js\n{\n  \"pem_encrypt\": {\n    \"foo\": {\n      \"pem\": pemkey,\n      \"pemstore\": \"secure/foo\",\n      \"rawstore\": \"private/foo\"\n    }\n  }\n}\n```\n\n#### Task `pem_decrypt`\n\nDecrypts the `store` file, using the same pem that encrypted it. This task carries the same configuration options found in the `pem_encrypt` task.\n\n#### Troubleshooting\n\nGenerate the private key only once, then encrypt and decrypt all you like using that one key.",
  "readmeFilename": "README.md",
  "_id": "grunt-pemcrypt@0.1.0",
  "_from": "grunt-pemcrypt@"
}
